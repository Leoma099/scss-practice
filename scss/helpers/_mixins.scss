// TEXT SATUS COLOR
@mixin create-text-status-color-code($component)
{
    @each $modifier, $style in $text-color
    {
        .sc-#{$component}-#{$modifier}
        {
            @each $color in $style
            {
                color: $color !important;
            }
        }
    }
}

// THEME STATUS COLOR
@mixin create-theme-status-color-code($component)
{
    @each $modifier, $style in $theme-color
    {
        .sc-#{$component}-#{$modifier}
        {
            @each $color in $style
            {
                background-color: $color !important;
            }
        }
    }
}

// BUTTON BACKGROUND COLOR
@mixin create-button-background-color($component)
{
    @each $modifier, $style in $button-background-color
    {
        .sc-#{$component}-#{$modifier}
        {
            @each $color in $style
            {
                background-color: $color !important;
            }
        }
    }
}

@mixin create-button-outline-color($component)
{
    @each $modifier, $style in $button-background-color
    {
        .sc-button-#{$component}-#{$modifier}
        {
            @each $color in $style
            {
                border: 1px solid $color !important;
            }
        }
    }
}

// WIDTH COLUMN
@mixin create-column($component)
{
    @each $modifier, $style in $column-width
    {
        .sc-#{$component}-#{$modifier}
        {
            @each $width-column in $style
            {
                width: $width-column !important;
            }
        }
    }
}

// GRID TEMPLATE COLUMN
@mixin create-grid-template-column($component)
{
    @each $modifier, $style in $grid-columns
    {
        .sc-#{$component}-#{$modifier}
        {
            @each $grid-column in $style
            {
                grid-template-columns: $grid-column !important;
            }
        }
    }
}

// GRID COLUMN SPAN
@mixin create-grid-column-span($component)
{
    @each $modifier, $style in $col-span
    {
        .sc-#{$component}-#{$modifier}
        {
            @each $span in $style
            {
                grid-column: $span !important;
            }
        }
    }
}

// GRID COLUMN START
@mixin create-grid-column-start($component)
{
    @each $modifier, $style in $col-start
    {
        .sc-#{$component}-#{$modifier}
        {
            @each $start in $style
            {
                grid-column-start: $start !important;
            }
        }
    }
}

// GRID COLUMN END
@mixin create-grid-column-end($component)
{
    @each $modifier, $style in $col-end
    {
        .sc-#{$component}-#{$modifier}
        {
            @each $end in $style
            {
                grid-column-end: $end !important;
            }
        }
    }
}

// RESPONSIVE DESIGN
@mixin respond-to($value)
{
    @if map-has-key($breakpoint, $value)
    {
        $size: map-get($breakpoint, $value);

        @media screen and (min-width: $size)
        {
            @content;    
        }
    }
    @else
    {
        @warn "Unknown `#{$value}` in $breakpoint";
    }
}

@mixin respond-to-max($value)
{
    @if map-has-key($breakpoint, $value)
    {
        $size: map-get($breakpoint, $value);

        @media screen and (max-width: $size)
        {
            @content;    
        }
    }
    @else
    {
        @warn "Unknown `#{$value}` in $breakpoint";
    }
}