// TEXT SATUS COLOR
@mixin create-text-status-color-code($component)
{
    @each $modifier, $style in $text-color
    {
        .sc-#{$component}-#{$modifier}
        {
            @each $color in $style
            {
                color: $color !important;
            }
        }
    }
}

// THEME STATUS COLOR
@mixin create-theme-status-color-code($component)
{
    @each $modifier, $style in $theme-color
    {
        .sc-#{$component}-#{$modifier}
        {
            @each $color in $style
            {
                background-color: $color !important;
            }
        }
    }
}

// BUTTON BACKGROUND COLOR
@mixin create-button-background-color($component)
{
    @each $modifier, $style in $button-background-color
    {
        .sc-#{$component}-#{$modifier}
        {
            @each $color in $style
            {
                background-color: $color !important;
            }
        }
    }
}

// BUTTON OUTLINRE COLOR
@mixin create-button-outline-color($component)
{
    @each $modifier, $style in $button-background-color
    {
        .sc-button-#{$component}-#{$modifier}
        {
            @each $color in $style
            {
                border: 1px solid $color !important;
            }
        }
    }
}

// RESPONSIVE

@mixin respond-to($value)
{
    @if map-has-key($breakpoint, $value)
    {
        $size: map-get($breakpoint, $value);

        @media screen and (min-width: $size)
        {
            @content;    
        }
    }
    @else
    {
        @warn "Unknown `#{$value}` in $breakpoint";
    }
}

@mixin respond-to-max($value)
{
    @if map-has-key($breakpoint, $value)
    {
        $size: map-get($breakpoint, $value);

        @media screen and (max-width: $size)
        {
            @content;    
        }
    }
    @else
    {
        @warn "Unknown `#{$value}` in $breakpoint";
    }
}

@mixin build-child-width-escorted-by-breakpoints
{

    $width:
    (
        sc-width:(
            box-sizing: border-box,
            width: 100%,
            /* 1 */
            max-width: 100%
        ),
        sc-width-1:(
            width:      8.333333%,
            flex-basis:     8.333333%
        ),
        sc-width-2:(
            width:      16.666672%,
            flex-basis:     16.666672%
        ),
        sc-width-3:(
            width:      25%,
            flex-basis:     25%
        ),
        sc-width-4:(
            width:      33.333333%,
            flex-basis:     33.333333%
        ),
        sc-width-5:(
            width:      41.666672%,
            flex-basis:     41.666672%
        ),
        sc-width-6:(
            width:      50%,
            flex-basis:     50%
        ),
        sc-width-7:(
            width:      58.333333%,
            flex-basis:     58.333333%
        ),
        sc-width-8:(
            width:      66.666672%,
            flex-basis:     66.666672%
        ),
        sc-width-9:(
            width:      75%,
            flex-basis:     75%
        ),
        sc-width-10:(
            width:      83.333333%,
            flex-basis:     83.333333%
        ),
        sc-width-11:(
            width:      91.666667%,
            flex-basis:     91.666667%
        ),
        sc-width-12:(
            width:      100%,
            flex-basis:     100%
        ),
        sc-width-auto:(
            width:      auto,
            flex-basis:     auto
        ),
    );

    // build itself width
    @each $classname, $style in $width
    {
        $condition: if($classname == "sc-width", "[class*='#{$classname}']", ".#{$classname}");

        #{$condition}
        {
            @each $proprety, $value in $style
            {
                #{$proprety}:#{$value};
            }
        }
    }

    // build breakpoints of itself width
    @each $size, $value in $breakpoint
    {
        @include respond-to($size)
        {
            @each $classname, $style in $width
            {
                @include initiate-width($size, $classname, $style);
            }
        }
    }
}

@mixin initiate-width($size, $classname, $style)
{
    @if($classname != 'sc-width')
    {
        @if($size == 'xsmall')
        {
            .sc-width-#{$classname}-#{$size}
            {
                
            }
        }
        @else if($size == 'small')
        {
            .#{$classname + '\\-small'}
            {
                @each $property, $value in $style
                {
                    #{$property}:#{$value};
                }
            }
        }
        @else if($size == 'medium')
        {
            .#{$classname + '\\-medium'}
            {
                @each $property, $value in $style
                {
                    #{$property}:#{$value};
                }
            }
        }
        @else if($size == 'large')
        {
            .#{$classname + '\\-large'}
            {
                @each $property, $value in $style
                {
                    #{$property}:#{$value};
                }
            }
        }
        @else if($size == 'xlarge')
        {
            .#{$classname + '\\-xlarge'}
            {
                @each $property, $value in $style
                {
                    #{$property}:#{$value};
                }
            }
        }
        @else{
            @warn 'errpr';
        }
    }
}


// BORDER RADIUS
@mixin create-border-radius($component)
{
    @each $modifier, $style in $border-radius
    {
        .sc-#{$component}-#{$modifier}
        {
            @each $radius in $style
            {
                border-radius: $radius !important;
            }
        }
    }
}

@mixin clearfix{
    &:before,
    &:after{
        content: "";
        display: table;
    }
    &:after{
        clear: both;
    }
}


// GRID TEMPLATE COLUMN + GRID COLUMN SPAN START END
@mixin build-grid-template-columns
{
    $grid-template-column:
    (
        sc-grid-columns-1:
        (
            grid-template-columns: repeat(1, minmax(0, 1fr))
        ),
        sc-grid-columns-2:
        (
            grid-template-columns: repeat(2, minmax(0, 1fr))
        ),
        sc-grid-columns-3:
        (
            grid-template-columns: repeat(3, minmax(0, 1fr))
        ),
        sc-grid-columns-4:
        (
            grid-template-columns: repeat(4, minmax(0, 1fr))
        ),
        sc-grid-columns-5:
        (
            grid-template-columns: repeat(5, minmax(0, 1fr))
        ),
        sc-grid-columns-6:
        (
            grid-template-columns: repeat(6, minmax(0, 1fr))
        ),
        sc-grid-columns-7:
        (
            grid-template-columns: repeat(7, minmax(0, 1fr))
        ),
        sc-grid-columns-8:
        (
            grid-template-columns: repeat(8, minmax(0, 1fr))
        ),
        sc-grid-columns-9:
        (
            grid-template-columns: repeat(9, minmax(0, 1fr))
        ),
        sc-grid-columns-10:
        (
            grid-template-columns: repeat(10, minmax(0, 1fr))
        ),
        sc-grid-columns-11:
        (
            grid-template-columns: repeat(11, minmax(0, 1fr))
        ),
        sc-grid-columns-12:
        (
            grid-template-columns: repeat(12, minmax(0, 1fr))
        ),
        sc-grid-columns-none:
        (
            grid-template-columns: none
        ),
        sc-grid-columns-subgrid:
        (
            grid-template-columns: subgrid
        ),
    );

    @each $classname, $style in $grid-template-column
    {
        $condition: if($classname == "sc-width", "[class*='#{$classname}']", ".#{$classname}");

        #{$condition}
        {
            @each $proprety, $value in $style
            {
                #{$proprety}:#{$value};
            }
        }
    }
}
@mixin build-grid-column-span
{
    $grid-column-span:
    (
        sc-grid-column-span-1:
        (
            grid-column: span 1 / span 1
        ),
        sc-grid-column-span-2:
        (
            grid-column: span 2 / span 2
        ),
        sc-grid-column-span-3:
        (
            grid-column: span 3 / span 3
        ),
        sc-grid-column-span-4:
        (
            grid-column: span 4 / span 4
        ),
        sc-grid-column-span-5:
        (
            grid-column: span 5 / span 5
        ),
        sc-grid-column-span-6:
        (
            grid-column: span 6 / span 6
        ),
        sc-grid-column-span-7:
        (
            grid-column: span 7 / span 7
        ),
        sc-grid-column-span-8:
        (
            grid-column: span 8 / span 8
        ),
        sc-grid-column-span-9:
        (
            grid-column: span 9 / span 9
        ),
        sc-grid-column-span-10:
        (
            grid-column: span 10 / span 10
        ),
        sc-grid-column-span-11:
        (
            grid-column: span 11 / span 11
        ),
        sc-grid-column-span-12:
        (
            grid-column: span 12 / span 12
        ),
        sc-grid-column-span-full:
        (
            grid-column: span 1 / span -1
        ),
    );

    @each $classname, $style in $grid-column-span
    {
        $condition: if($classname == "sc-width", "[class*='#{$classname}']", ".#{$classname}");

        #{$condition}
        {
            @each $proprety, $value in $style
            {
                #{$proprety}:#{$value};
            }
        }
    }
}
@mixin build-grid-column-start
{
    $grid-column-start:
    (
        sc-grid-column-start-1:
        (
            grid-column-start: 1
        ),
        sc-grid-column-start-2:
        (
            grid-column-start: 2
        ),
        sc-grid-column-start-3:
        (
            grid-column-start: 3
        ),
        sc-grid-column-start-4:
        (
            grid-column-start: 4
        ),
        sc-grid-column-start-5:
        (
            grid-column-start: 5
        ),
        sc-grid-column-start-6:
        (
            grid-column-start: 6
        ),
        sc-grid-column-start-7:
        (
            grid-column-start: 7
        ),
        sc-grid-column-start-8:
        (
            grid-column-start: 8
        ),
        sc-grid-column-start-9:
        (
            grid-column-start: 9
        ),
        sc-grid-column-start-10:
        (
            grid-column-start: 10
        ),
        sc-grid-column-start-11:
        (
            grid-column-start: 11
        ),
        sc-grid-column-start-12:
        (
            grid-column-start: 12
        )
    );

    @each $classname, $style in $grid-column-start
    {
        $condition: if($classname == "sc-width", "[class*='#{$classname}']", ".#{$classname}");

        #{$condition}
        {
            @each $proprety, $value in $style
            {
                #{$proprety}:#{$value};
            }
        }
    }
}
@mixin build-grid-column-end
{
    $grid-column-end:
    (
        sc-grid-column-end-1:
        (
            grid-column-end: 1
        ),
        sc-grid-column-end-2:
        (
            grid-column-end: 2
        ),
        sc-grid-column-end-3:
        (
            grid-column-end: 3
        ),
        sc-grid-column-end-4:
        (
            grid-column-end: 4
        ),
        sc-grid-column-end-5:
        (
            grid-column-end: 5
        ),
        sc-grid-column-end-6:
        (
            grid-column-end: 6
        ),
        sc-grid-column-end-7:
        (
            grid-column-end: 7
        ),
        sc-grid-column-end-8:
        (
            grid-column-end: 8
        ),
        sc-grid-column-end-9:
        (
            grid-column-end: 9
        ),
        sc-grid-column-end-10:
        (
            grid-column-end: 10
        ),
        sc-grid-column-end-11:
        (
            grid-column-end: 11
        ),
        sc-grid-column-end-12:
        (
            grid-column-end: 12
        )
    );

    @each $classname, $style in $grid-column-end
    {
        $condition: if($classname == "sc-width", "[class*='#{$classname}']", ".#{$classname}");

        #{$condition}
        {
            @each $proprety, $value in $style
            {
                #{$proprety}:#{$value};
            }
        }
    }
}

// GRID TEMPLATE ROW + GRID ROW SPAN START END
@mixin build-grid-template-rows
{
    $grid-template-row:
    (
        sc-grid-rows-1:
        (
            grid-template-rows: repeat(1, minmax(0, 1fr))
        ),
        sc-grid-rows-2:
        (
            grid-template-rows: repeat(2, minmax(0, 1fr))
        ),
        sc-grid-rows-3:
        (
            grid-template-rows: repeat(3, minmax(0, 1fr))
        ),
        sc-grid-rows-4:
        (
            grid-template-rows: repeat(4, minmax(0, 1fr))
        ),
        sc-grid-rows-5:
        (
            grid-template-rows: repeat(5, minmax(0, 1fr))
        ),
        sc-grid-rows-6:
        (
            grid-template-rows: repeat(6, minmax(0, 1fr))
        ),
        sc-grid-rows-7:
        (
            grid-template-rows: repeat(7, minmax(0, 1fr))
        ),
        sc-grid-rows-8:
        (
            grid-template-rows: repeat(8, minmax(0, 1fr))
        ),
        sc-grid-rows-9:
        (
            grid-template-rows: repeat(9, minmax(0, 1fr))
        ),
        sc-grid-rows-10:
        (
            grid-template-rows: repeat(10, minmax(0, 1fr))
        ),
        sc-grid-rows-11:
        (
            grid-template-rows: repeat(11, minmax(0, 1fr))
        ),
        sc-grid-rows-12:
        (
            grid-template-rows: repeat(12, minmax(0, 1fr))
        ),
        sc-grid-rows-none:
        (
            grid-template-rows: none
        ),
        sc-grid-rows-subgrid:
        (
            grid-template-rows: subgrid
        ),
    );

    @each $classname, $style in $grid-template-row
    {
        $condition: if($classname == "sc-width", "[class*='#{$classname}']", ".#{$classname}");

        #{$condition}
        {
            @each $proprety, $value in $style
            {
                #{$proprety}:#{$value};
            }
        }
    }
}
@mixin build-grid-row-span
{
    $grid-row-span:
    (
        sc-grid-row-span-1:
        (
            grid-row: span 1 / span 1
        ),
        sc-grid-row-span-2:
        (
            grid-row: span 2 / span 2
        ),
        sc-grid-row-span-3:
        (
            grid-row: span 3 / span 3
        ),
        sc-grid-row-span-4:
        (
            grid-row: span 4 / span 4
        ),
        sc-grid-row-span-5:
        (
            grid-row: span 5 / span 5
        ),
        sc-grid-row-span-6:
        (
            grid-row: span 6 / span 6
        ),
        sc-grid-row-span-7:
        (
            grid-row: span 7 / span 7
        ),
        sc-grid-row-span-8:
        (
            grid-row: span 8 / span 8
        ),
        sc-grid-row-span-9:
        (
            grid-row: span 9 / span 9
        ),
        sc-grid-row-span-10:
        (
            grid-row: span 10 / span 10
        ),
        sc-grid-row-span-11:
        (
            grid-row: span 11 / span 11
        ),
        sc-grid-row-span-12:
        (
            grid-row: span 12 / span 12
        ),
        sc-grid-row-span-full:
        (
            grid-row: span 1 / span -1
        ),
    );

    @each $classname, $style in $grid-row-span
    {
        $condition: if($classname == "sc-width", "[class*='#{$classname}']", ".#{$classname}");

        #{$condition}
        {
            @each $proprety, $value in $style
            {
                #{$proprety}:#{$value};
            }
        }
    }
}
@mixin build-grid-row-start
{
    $grid-row-start:
    (
        sc-grid-row-start-1:
        (
            grid-row-start: 1
        ),
        sc-grid-row-start-2:
        (
            grid-row-start: 2
        ),
        sc-grid-row-start-3:
        (
            grid-row-start: 3
        ),
        sc-grid-row-start-4:
        (
            grid-row-start: 4
        ),
        sc-grid-row-start-5:
        (
            grid-row-start: 5
        ),
        sc-grid-row-start-6:
        (
            grid-row-start: 6
        ),
        sc-grid-row-start-7:
        (
            grid-row-start: 7
        ),
        sc-grid-row-start-8:
        (
            grid-row-start: 8
        ),
        sc-grid-row-start-9:
        (
            grid-row-start: 9
        ),
        sc-grid-row-start-10:
        (
            grid-row-start: 10
        ),
        sc-grid-row-start-11:
        (
            grid-row-start: 11
        ),
        sc-grid-row-start-12:
        (
            grid-row-start: 12
        )
    );

    @each $classname, $style in $grid-row-start
    {
        $condition: if($classname == "sc-width", "[class*='#{$classname}']", ".#{$classname}");

        #{$condition}
        {
            @each $proprety, $value in $style
            {
                #{$proprety}:#{$value};
            }
        }
    }
}
@mixin build-grid-row-end
{
    $grid-row-end:
    (
        sc-grid-row-end-1:
        (
            grid-row-end: 1
        ),
        sc-grid-row-end-2:
        (
            grid-row-end: 2
        ),
        sc-grid-row-end-3:
        (
            grid-row-end: 3
        ),
        sc-grid-row-end-4:
        (
            grid-row-end: 4
        ),
        sc-grid-row-end-5:
        (
            grid-row-end: 5
        ),
        sc-grid-row-end-6:
        (
            grid-row-end: 6
        ),
        sc-grid-row-end-7:
        (
            grid-row-end: 7
        ),
        sc-grid-row-end-8:
        (
            grid-row-end: 8
        ),
        sc-grid-row-end-9:
        (
            grid-row-end: 9
        ),
        sc-grid-row-end-10:
        (
            grid-row-end: 10
        ),
        sc-grid-row-end-11:
        (
            grid-row-end: 11
        ),
        sc-grid-row-end-12:
        (
            grid-row-end: 12
        )
    );

    @each $classname, $style in $grid-row-end
    {
        $condition: if($classname == "sc-width", "[class*='#{$classname}']", ".#{$classname}");

        #{$condition}
        {
            @each $proprety, $value in $style
            {
                #{$proprety}:#{$value};
            }
        }
    }
}


@mixin initiate-font
{
    $font-style:
    (
        sc-text-header: 
        (
            font-family: Helvetica,
            font-weight: 500,
            font-size: 16px
        ),
    );

    @each $classname, $style in $font-style
    {
        $condition: if($classname == "sc-width", "[class*='#{$classname}']", ".#{$classname}");

        #{$condition}
        {
            @each $proprety, $value in $style
            {
                #{$proprety}:#{$value};
            }
        }
    }
}